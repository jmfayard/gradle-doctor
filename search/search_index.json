{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gradle Doctor The right prescription for your Gradle build. Watch this Virtual Android Makers 2019 entitled The Secrets of the Build Scan Plugin and the Internals of Gradle to learn more about what this plugin does. Usage buildscript { dependencies { classpath \"com.osacky.doctor:doctor-plugin:0.5.1\" } } // Must be applied in the project root. apply plugin: \"com.osacky.doctor\" Features Configurable warnings for build speed problems Measure time spent in Dagger annotation processors. Use Delect to save time. Ensure JAVA_HOME is set and matches IDE's JAVA_HOME Easily disable test caching. Tests may not declare all inputs causing false positives . Needed until Gradle implements a sandbox. Disable assembling all apps in repository simultaneously. Fail build when empty src directories are found. Empty src directories cause cache misses . Benchmarking remote build cache connection speed . Configurable Warnings Warn when build spends more than 10% of the time garbage collecting. Warn when connection to maven repositories is slowing down the build. Warn when build cache connection speed is slowing down the build. Here are the configuration options with their defaults:","title":"Home"},{"location":"#gradle-doctor","text":"The right prescription for your Gradle build. Watch this Virtual Android Makers 2019 entitled The Secrets of the Build Scan Plugin and the Internals of Gradle to learn more about what this plugin does.","title":"Gradle Doctor"},{"location":"#usage","text":"buildscript { dependencies { classpath \"com.osacky.doctor:doctor-plugin:0.5.1\" } } // Must be applied in the project root. apply plugin: \"com.osacky.doctor\"","title":"Usage"},{"location":"#features","text":"Configurable warnings for build speed problems Measure time spent in Dagger annotation processors. Use Delect to save time. Ensure JAVA_HOME is set and matches IDE's JAVA_HOME Easily disable test caching. Tests may not declare all inputs causing false positives . Needed until Gradle implements a sandbox. Disable assembling all apps in repository simultaneously. Fail build when empty src directories are found. Empty src directories cause cache misses . Benchmarking remote build cache connection speed .","title":"Features"},{"location":"#configurable-warnings","text":"Warn when build spends more than 10% of the time garbage collecting. Warn when connection to maven repositories is slowing down the build. Warn when build cache connection speed is slowing down the build. Here are the configuration options with their defaults:","title":"Configurable Warnings"},{"location":"changelog/","text":"Changelog Unreleased 0.5.1 Fix bugs in JAVA_HOME check #110 . Thanks ZacSweers 0.5.0 Check for farthest empty parent for reporting file to remove #105 . Fixes #96 Thanks ZacSweers Breaking API change Add more granularity to JAVA_HOME checks #104 . Fixes #98 Thanks ZacSweers 0.4.3 Experimental Configuration Cache support. Note: it is not fully supported, but it will not generate warnings. 0.4.2 Fix bug when running remote build cache benchmark and specifying a custom build cache directory. 0.4.1 Fix confusing warning about slow connection to maven repositories. Publish marker to maven central. 0.4.0 More control over which tasks are re-run in remote cache benchmark. See README.md for more information. Use Gradle Properties for lazy configuration and future configuration caching support. (Breaking API change) Fix performance by not using afterEvaluate . 0.3.4 Correctly calculate download speeds for build cache and remote repositories. 0.3.3 Print out number of tasks which were forced to re-execute. 0.3.2 Fix NPE when calculating remote benchmark cache. 0.3.1 Fix megabyte estimation Also add include Android resource compilation tasks in remote build cache estimation. 0.3.0 Ability to benchmark remote build cache connection speed.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#051","text":"Fix bugs in JAVA_HOME check #110 . Thanks ZacSweers","title":"0.5.1"},{"location":"changelog/#050","text":"Check for farthest empty parent for reporting file to remove #105 . Fixes #96 Thanks ZacSweers Breaking API change Add more granularity to JAVA_HOME checks #104 . Fixes #98 Thanks ZacSweers","title":"0.5.0"},{"location":"changelog/#043","text":"Experimental Configuration Cache support. Note: it is not fully supported, but it will not generate warnings.","title":"0.4.3"},{"location":"changelog/#042","text":"Fix bug when running remote build cache benchmark and specifying a custom build cache directory.","title":"0.4.2"},{"location":"changelog/#041","text":"Fix confusing warning about slow connection to maven repositories. Publish marker to maven central.","title":"0.4.1"},{"location":"changelog/#040","text":"More control over which tasks are re-run in remote cache benchmark. See README.md for more information. Use Gradle Properties for lazy configuration and future configuration caching support. (Breaking API change) Fix performance by not using afterEvaluate .","title":"0.4.0"},{"location":"changelog/#034","text":"Correctly calculate download speeds for build cache and remote repositories.","title":"0.3.4"},{"location":"changelog/#033","text":"Print out number of tasks which were forced to re-execute.","title":"0.3.3"},{"location":"changelog/#032","text":"Fix NPE when calculating remote benchmark cache.","title":"0.3.2"},{"location":"changelog/#031","text":"Fix megabyte estimation Also add include Android resource compilation tasks in remote build cache estimation.","title":"0.3.1"},{"location":"changelog/#030","text":"Ability to benchmark remote build cache connection speed.","title":"0.3.0"},{"location":"configuration/","text":"Configuration Sample Configuration Groovy doctor { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons = false /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold = . 5 f /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold = 0.10f /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold = 5000 /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching = true /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories = true /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously = false /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches = true /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet = true /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Kotlin configure < DoctorExtension > { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons . set ( false ) /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold . set (. 5 f ) /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold . set ( 0.10f ) /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold . set ( 5000 ) /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching . set ( true ) /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories . set ( true ) /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously . set ( false ) /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches . set ( true ) /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet . set ( true ) /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Configuration extension code is here.","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#sample-configuration","text":"Groovy doctor { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons = false /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold = . 5 f /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold = 0.10f /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold = 5000 /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching = true /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories = true /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously = false /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches = true /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet = true /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Kotlin configure < DoctorExtension > { /** * Throw an exception when multiple Gradle Daemons are running. */ disallowMultipleDaemons . set ( false ) /** * Show a message if the download speed is less than this many megabytes / sec. */ downloadSpeedWarningThreshold . set (. 5 f ) /** * The level at which to warn when a build spends more than this percent garbage collecting. */ GCWarningThreshold . set ( 0.10f ) /** * Print a warning to the console if we spend more than this amount of time with Dagger annotation processors. */ daggerThreshold . set ( 5000 ) /** * By default, Gradle caches test results. This can be dangerous if tests rely on timestamps, dates, or other files * which are not declared as inputs. */ enableTestCaching . set ( true ) /** * By default, Gradle treats empty directories as inputs to compilation tasks. This can cause cache misses. */ failOnEmptyDirectories . set ( true ) /** * Do not allow building all apps simultaneously. This is likely not what the user intended. */ allowBuildingAllAndroidAppsSimultaneously . set ( false ) /** Configuration properties relating to JAVA_HOME */ javaHome { /** * Ensure that we are using JAVA_HOME to build with this Gradle. */ ensureJavaHomeMatches . set ( true ) /** * Ensure we have JAVA_HOME set. */ ensureJavaHomeIsSet . set ( true ) /** * Fail on any `JAVA_HOME` issues. */ failOnError . set ( true ) /** * Extra message text, if any, to show with the Gradle Doctor message. This is useful if you have a wiki page or * other instructions that you want to link for developers on your team if they encounter an issue. */ extraMessage . set ( \"Here's an extra message to show.\" ) } } Configuration extension code is here.","title":"Sample Configuration"},{"location":"releasing/","text":"Releasing Create a local release branch from master git checkout master git pull git checkout -b release_0.5.2 Update version in doctor-plugin/build.gradle.kts (remove -SNAPSHOT ) version = \"0.5.2\" Update the current version and next version in mkdocs.yml : extra: doctor: release: '0.5.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.5.2 release\" Create a tag and push it git tag v0.5.2 git push origin v0.5.2 Upload to Maven Central ./gradlew publishToMavenCentral -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew publishToGradlePlugin Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.5.2 Update version in doctor-plugin/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"releasing/#releasing","text":"Create a local release branch from master git checkout master git pull git checkout -b release_0.5.2 Update version in doctor-plugin/build.gradle.kts (remove -SNAPSHOT ) version = \"0.5.2\" Update the current version and next version in mkdocs.yml : extra: doctor: release: '0.5.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Take one last look git diff Commit all local changes git commit -am \"Prepare 0.5.2 release\" Create a tag and push it git tag v0.5.2 git push origin v0.5.2 Upload to Maven Central ./gradlew publishToMavenCentral -Dorg.gradle.internal.publish.checksums.insecure = true Upload to Gradle Plugin Portal ./gradlew publishToGradlePlugin Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Merge the release branch to master git checkout master git pull git merge --no-ff release_0.5.2 Update version in doctor-plugin/build.gradle.kts (increase version and add -SNAPSHOT ) version = \"REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT\" Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push","title":"Releasing"},{"location":"remote-cache/","text":"Remote Build Cache Benchmark More information How fast does my internet connection need to be in order to benefit from the Gradle Remote Build Cache? Read Part 1 and Part 2 Basic Benchmark To start the benchmark, run a Gradle task that you would like to profile with the flag -PbenchmarkRemoteCache To force tasks to rerun for the benchmark, use -PrerunSourceTasksForBenchmark and -PrerunLargeOutputTasksForBenchmark to control which tasks are forced to re-run as part of the benchmark. Example full benchmark scenario: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache -PrerunSourceTasksForBenchmark -PrerunLargeOutputTasksForBenchmark ` Customized Benchmark Scenario You can also omit the rerun properties in order to measure the individual performance of specific tasks by forcing tasks to rerun with outputs.upToDateWhen { false } . For example: tasks . withType ( SourceTask ). configureEach { outputs . upToDateWhen { false } } Then run the specific benchmark scenario like so: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache ` Benchmark Result Report This is an example remote cache benchmark report. =============================== Gradle Doctor Prescriptions ============================================ | = Remote Build Cache Benchmark Report = | | Executed tasks created compressed artifacts of size 159,93 MB | | Total Task execution time was 208,85 s | | | | In order for a remote build cache to save you time, you would need an internet connection to your | | node of at least 0,77 MB/s. | | Check a build scan to see your connection speed to the build cache node. | | Build cache node throughput may be different than your internet connection speed. | | | | A 1 MB/s connection would save you 48,92 s. | | A 2 MB/s connection would save you 128,88 s. | | A 10 MB/s connection would save you 192,86 s. i | | | | Note: This is an estimate. Real world performance may vary. This estimate does not take in to accoun | | t time spent decompressing cached artifacts or roundtrip communication time to the cache node. | ========================================================================================================","title":"Remote Cache Benchmark"},{"location":"remote-cache/#remote-build-cache-benchmark","text":"","title":"Remote Build Cache Benchmark"},{"location":"remote-cache/#more-information","text":"How fast does my internet connection need to be in order to benefit from the Gradle Remote Build Cache? Read Part 1 and Part 2","title":"More information"},{"location":"remote-cache/#basic-benchmark","text":"To start the benchmark, run a Gradle task that you would like to profile with the flag -PbenchmarkRemoteCache To force tasks to rerun for the benchmark, use -PrerunSourceTasksForBenchmark and -PrerunLargeOutputTasksForBenchmark to control which tasks are forced to re-run as part of the benchmark. Example full benchmark scenario: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache -PrerunSourceTasksForBenchmark -PrerunLargeOutputTasksForBenchmark `","title":"Basic Benchmark"},{"location":"remote-cache/#customized-benchmark-scenario","text":"You can also omit the rerun properties in order to measure the individual performance of specific tasks by forcing tasks to rerun with outputs.upToDateWhen { false } . For example: tasks . withType ( SourceTask ). configureEach { outputs . upToDateWhen { false } } Then run the specific benchmark scenario like so: ./gradlew :app:assembleDebug -PbenchmarkRemoteCache `","title":"Customized Benchmark Scenario"},{"location":"remote-cache/#benchmark-result-report","text":"This is an example remote cache benchmark report. =============================== Gradle Doctor Prescriptions ============================================ | = Remote Build Cache Benchmark Report = | | Executed tasks created compressed artifacts of size 159,93 MB | | Total Task execution time was 208,85 s | | | | In order for a remote build cache to save you time, you would need an internet connection to your | | node of at least 0,77 MB/s. | | Check a build scan to see your connection speed to the build cache node. | | Build cache node throughput may be different than your internet connection speed. | | | | A 1 MB/s connection would save you 48,92 s. | | A 2 MB/s connection would save you 128,88 s. | | A 10 MB/s connection would save you 192,86 s. i | | | | Note: This is an estimate. Real world performance may vary. This estimate does not take in to accoun | | t time spent decompressing cached artifacts or roundtrip communication time to the cache node. | ========================================================================================================","title":"Benchmark Result Report"}]}